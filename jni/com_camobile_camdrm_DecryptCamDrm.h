/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <jni.h>
#include <android/log.h>

#include <string.h>

#include <string>
#include <vector>

#include "aes.h"

/* Header for class com_camobile_camdrm_DecryptCamDrm */

#ifndef _Included_com_camobile_camdrm_DecryptCamDrm
#define _Included_com_camobile_camdrm_DecryptCamDrm
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_camobile_camdrm_DecryptCamDrm
 * Method:    decrypt_native
 * Signature: (Ljava/lang/String;Ljava/lang/String;[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_camobile_camdrm_DecryptCamDrm_decrypt_1native
  (JNIEnv *, jobject, jstring, jstring, jbyteArray);


std::string cformat (char *format, ...)
{
  int bufsize = 1024; // 適当なサイズ
  std::vector<char> buff (bufsize);
  va_list args;

  // 適当なバッファサイズで先ずは、vsnprintfを試す。
  va_start (args, format);
  int vssize = vsnprintf (&buff[0], bufsize, format, args);
  va_end (args);

  // vsnprintfが成功した場合終了する。
  if (vssize >= 0 && vssize < bufsize)
  {
    buff.resize (vssize);
    return std::string (buff.begin (), buff.end ());
  }

  if (vssize < 0)
    return "";

  // サイズを再割り当てし、再度試す
  buff.resize (vssize + 1);
  va_start (args, format);
  vssize = vsnprintf (&buff[0], vssize + 1, format, args);
  va_end (args);
  if (vssize < 0) return "";
  buff.resize (vssize);
  return std::string (buff.begin (), buff.end ());
}

#ifdef __cplusplus
}
#endif
#endif
